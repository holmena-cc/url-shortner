// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: urls.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createURL = `-- name: CreateURL :one
INSERT INTO urls (user_id, original_url, short_code, custom_alias)
VALUES ($1, $2, $3, $4)
RETURNING url_id, user_id, original_url, short_code, custom_alias, creation_date
`

type CreateURLParams struct {
	UserID      int32
	OriginalUrl string
	ShortCode   string
	CustomAlias sql.NullString
}

type CreateURLRow struct {
	UrlID        int32
	UserID       int32
	OriginalUrl  string
	ShortCode    string
	CustomAlias  sql.NullString
	CreationDate time.Time
}

func (q *Queries) CreateURL(ctx context.Context, arg CreateURLParams) (CreateURLRow, error) {
	row := q.db.QueryRowContext(ctx, createURL,
		arg.UserID,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.CustomAlias,
	)
	var i CreateURLRow
	err := row.Scan(
		&i.UrlID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CustomAlias,
		&i.CreationDate,
	)
	return i, err
}

const deleteURL = `-- name: DeleteURL :exec
DELETE FROM urls WHERE url_id = $1
`

func (q *Queries) DeleteURL(ctx context.Context, urlID int32) error {
	_, err := q.db.ExecContext(ctx, deleteURL, urlID)
	return err
}

const getURLByCode = `-- name: GetURLByCode :one
SELECT url_id, user_id, original_url, short_code, custom_alias, creation_date
FROM urls
WHERE short_code = $1
`

type GetURLByCodeRow struct {
	UrlID        int32
	UserID       int32
	OriginalUrl  string
	ShortCode    string
	CustomAlias  sql.NullString
	CreationDate time.Time
}

func (q *Queries) GetURLByCode(ctx context.Context, shortCode string) (GetURLByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getURLByCode, shortCode)
	var i GetURLByCodeRow
	err := row.Scan(
		&i.UrlID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CustomAlias,
		&i.CreationDate,
	)
	return i, err
}

const getURLByID = `-- name: GetURLByID :one
SELECT url_id, user_id, original_url, short_code, custom_alias, creation_date
FROM urls
WHERE url_id = $1
`

type GetURLByIDRow struct {
	UrlID        int32
	UserID       int32
	OriginalUrl  string
	ShortCode    string
	CustomAlias  sql.NullString
	CreationDate time.Time
}

func (q *Queries) GetURLByID(ctx context.Context, urlID int32) (GetURLByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getURLByID, urlID)
	var i GetURLByIDRow
	err := row.Scan(
		&i.UrlID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CustomAlias,
		&i.CreationDate,
	)
	return i, err
}

const listURLsByUser = `-- name: ListURLsByUser :many
SELECT url_id, short_code, original_url, custom_alias, creation_date
FROM urls
WHERE user_id = $1
ORDER BY creation_date DESC
`

type ListURLsByUserRow struct {
	UrlID        int32
	ShortCode    string
	OriginalUrl  string
	CustomAlias  sql.NullString
	CreationDate time.Time
}

func (q *Queries) ListURLsByUser(ctx context.Context, userID int32) ([]ListURLsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listURLsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListURLsByUserRow
	for rows.Next() {
		var i ListURLsByUserRow
		if err := rows.Scan(
			&i.UrlID,
			&i.ShortCode,
			&i.OriginalUrl,
			&i.CustomAlias,
			&i.CreationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateURL = `-- name: UpdateURL :one
UPDATE urls
SET original_url = $2, short_code = $3, custom_alias = $4
WHERE url_id = $1
RETURNING url_id, short_code, original_url, custom_alias, creation_date
`

type UpdateURLParams struct {
	UrlID       int32
	OriginalUrl string
	ShortCode   string
	CustomAlias sql.NullString
}

type UpdateURLRow struct {
	UrlID        int32
	ShortCode    string
	OriginalUrl  string
	CustomAlias  sql.NullString
	CreationDate time.Time
}

func (q *Queries) UpdateURL(ctx context.Context, arg UpdateURLParams) (UpdateURLRow, error) {
	row := q.db.QueryRowContext(ctx, updateURL,
		arg.UrlID,
		arg.OriginalUrl,
		arg.ShortCode,
		arg.CustomAlias,
	)
	var i UpdateURLRow
	err := row.Scan(
		&i.UrlID,
		&i.ShortCode,
		&i.OriginalUrl,
		&i.CustomAlias,
		&i.CreationDate,
	)
	return i, err
}
