// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash)
VALUES ($1, $2, $3)
RETURNING user_id, username, email, register_date
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
}

type CreateUserRow struct {
	UserID       int32
	Username     string
	Email        string
	RegisterDate time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.RegisterDate,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, username, email, password_hash, register_date
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID       int32
	Username     string
	Email        string
	PasswordHash string
	RegisterDate time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.RegisterDate,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, username, email, password_hash, register_date
FROM users
WHERE user_id = $1
`

type GetUserByIDRow struct {
	UserID       int32
	Username     string
	Email        string
	PasswordHash string
	RegisterDate time.Time
}

func (q *Queries) GetUserByID(ctx context.Context, userID int32) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.RegisterDate,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, username, email, register_date
FROM users
ORDER BY register_date DESC
`

type ListUsersRow struct {
	UserID       int32
	Username     string
	Email        string
	RegisterDate time.Time
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.RegisterDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2, email = $3
WHERE user_id = $1
RETURNING user_id, username, email, register_date
`

type UpdateUserParams struct {
	UserID   int32
	Username string
	Email    string
}

type UpdateUserRow struct {
	UserID       int32
	Username     string
	Email        string
	RegisterDate time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.UserID, arg.Username, arg.Email)
	var i UpdateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Email,
		&i.RegisterDate,
	)
	return i, err
}
