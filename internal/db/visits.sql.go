// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: visits.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createVisit = `-- name: CreateVisit :one
INSERT INTO visits (url_id, ip_address, referrer, country)
VALUES ($1, $2, $3, $4)
RETURNING click_id, url_id, click_date, ip_address, referrer, country
`

type CreateVisitParams struct {
	UrlID     int32
	IpAddress string
	Referrer  sql.NullString
	Country   sql.NullString
}

type CreateVisitRow struct {
	ClickID   int32
	UrlID     int32
	ClickDate time.Time
	IpAddress string
	Referrer  sql.NullString
	Country   sql.NullString
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) (CreateVisitRow, error) {
	row := q.db.QueryRowContext(ctx, createVisit,
		arg.UrlID,
		arg.IpAddress,
		arg.Referrer,
		arg.Country,
	)
	var i CreateVisitRow
	err := row.Scan(
		&i.ClickID,
		&i.UrlID,
		&i.ClickDate,
		&i.IpAddress,
		&i.Referrer,
		&i.Country,
	)
	return i, err
}

const deleteVisit = `-- name: DeleteVisit :exec
DELETE FROM visits WHERE click_id = $1
`

func (q *Queries) DeleteVisit(ctx context.Context, clickID int32) error {
	_, err := q.db.ExecContext(ctx, deleteVisit, clickID)
	return err
}

const getVisitByID = `-- name: GetVisitByID :one
SELECT click_id, url_id, click_date, ip_address, referrer, country
FROM visits
WHERE click_id = $1
`

type GetVisitByIDRow struct {
	ClickID   int32
	UrlID     int32
	ClickDate time.Time
	IpAddress string
	Referrer  sql.NullString
	Country   sql.NullString
}

func (q *Queries) GetVisitByID(ctx context.Context, clickID int32) (GetVisitByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getVisitByID, clickID)
	var i GetVisitByIDRow
	err := row.Scan(
		&i.ClickID,
		&i.UrlID,
		&i.ClickDate,
		&i.IpAddress,
		&i.Referrer,
		&i.Country,
	)
	return i, err
}

const listVisitsByURL = `-- name: ListVisitsByURL :many
SELECT click_id, click_date, ip_address, referrer, country
FROM visits
WHERE url_id = $1
ORDER BY click_date DESC
`

type ListVisitsByURLRow struct {
	ClickID   int32
	ClickDate time.Time
	IpAddress string
	Referrer  sql.NullString
	Country   sql.NullString
}

func (q *Queries) ListVisitsByURL(ctx context.Context, urlID int32) ([]ListVisitsByURLRow, error) {
	rows, err := q.db.QueryContext(ctx, listVisitsByURL, urlID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListVisitsByURLRow
	for rows.Next() {
		var i ListVisitsByURLRow
		if err := rows.Scan(
			&i.ClickID,
			&i.ClickDate,
			&i.IpAddress,
			&i.Referrer,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
